<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:system="clr-namespace:System;assembly=mscorlib"
    xmlns:mah="http://metro.mahapps.com/winfx/xaml/controls"
    xmlns:mahConverters="http://metro.mahapps.com/winfx/xaml/shared">
    
    <!--  Menu  -->
    <Style
        x:Key="Zephyr.Styles.Menu"
        TargetType="{x:Type Menu}">
        <Setter Property="BorderBrush" Value="{DynamicResource Zephyr.Brushes.Menu.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource Zephyr.Brushes.Menu.Foreground}"/>
        <Setter Property="Background" Value="{DynamicResource Zephyr.Brushes.Menu.Background}"/>
    </Style>

    <!--  TopMenuItem  -->
    <Style
        x:Key="Zephyr.Styles.TopMenuItem"
        TargetType="{x:Type MenuItem}">
        <Setter Property="BorderBrush" Value="{DynamicResource Zephyr.Brushes.TopMenuItem.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource Zephyr.Brushes.TopMenuItem.Foreground}" />
        <Setter Property="Background" Value="{DynamicResource Zephyr.Brushes.TopMenuItem.Background}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}, FallbackValue={x:Static HorizontalAlignment.Left}}" />
        <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}, FallbackValue={x:Static VerticalAlignment.Top}}" />
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Padding" Value="7 5 8 6" />
                <Setter Property="Template" Value="{DynamicResource Zephyr.Templates.TopMenu}" />
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Padding" Value="7 5 8 6" />
                <Setter Property="Template" Value="{DynamicResource Zephyr.Templates.TopMenuItem}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Padding" Value="2 6 2 6" />
                <Setter Property="Template" Value="{DynamicResource Zephyr.Templates.SubMenu}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Padding" Value="2 6 2 6" />
                <Setter Property="Template" Value="{DynamicResource Zephyr.Templates.SubMenuItem}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  SubMenuItem  -->
    <Style
        x:Key="Zephyr.Styles.SubMenuItem"
        TargetType="{x:Type MenuItem}">
        <Setter Property="BorderBrush" Value="{DynamicResource Zephyr.Brushes.SubMenuItem.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource Zephyr.Brushes.SubMenuItem.Foreground}" />
        <Setter Property="Background" Value="{DynamicResource Zephyr.Brushes.SubMenuItem.Background}" />
        <Style.Triggers>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource Zephyr.Brushes.SubMenuItem.Border.Highlighted}" />
                <Setter Property="Foreground" Value="{DynamicResource Zephyr.Brushes.SubMenuItem.ForeGround.Highlighted}" />
                <Setter Property="Background" Value="{DynamicResource Zephyr.Brushes.SubMenuItem.Background.Highlighted}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="BorderBrush" Value="{DynamicResource Zephyr.Brushes.SubMenuItem.Border.Disabled}" />
                <Setter Property="Foreground" Value="{DynamicResource Zephyr.Brushes.SubMenuItem.ForeGround.Disabled}" />
                <Setter Property="Background" Value="{DynamicResource Zephyr.Brushes.SubMenuItem.Background.Disabled}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource Zephyr.Brushes.SubMenuItem.Border.Pressed}" />
                <Setter Property="Foreground" Value="{DynamicResource Zephyr.Brushes.SubMenuItem.ForeGround.Pressed}" />
                <Setter Property="Background" Value="{DynamicResource Zephyr.Brushes.SubMenuItem.Background.Pressed}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  MenuItem.Separator  -->
    <Style
        x:Key="Zephyr.Styles.MenuItem.Separator"
        TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="{DynamicResource MahApps.Brushes.Menu.Background}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Margin" Value="6 2 6 2" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Grid Margin="0 6 0 4" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <Rectangle Height="1"
                                   Margin="20 0 1 1"
                                   Fill="{DynamicResource MahApps.Brushes.Gray7}"
                                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                   UseLayoutRounding="True" />
                        <Rectangle Height="1"
                                   Margin="20 1 1 0"
                                   Fill="{DynamicResource MahApps.Brushes.ThemeBackground}"
                                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                   UseLayoutRounding="True" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  RepeatButton.MenuScroll  -->
    <Style
        x:Key="Zephyr.Styles.RepeatButton.MenuScroll"
        BasedOn="{x:Null}"
        TargetType="{x:Type RepeatButton}">
        <Setter Property="ClickMode" Value="Hover" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <DockPanel Background="Transparent" SnapsToDevicePixels="True">
                        <Rectangle x:Name="R1"
                                   Width="1"
                                   DockPanel.Dock="Right"
                                   Fill="Transparent" />
                        <Rectangle x:Name="B1"
                                   Height="1"
                                   DockPanel.Dock="Bottom"
                                   Fill="Transparent" />
                        <Rectangle x:Name="L1"
                                   Width="1"
                                   DockPanel.Dock="Left"
                                   Fill="Transparent" />
                        <Rectangle x:Name="T1"
                                   Height="1"
                                   DockPanel.Dock="Top"
                                   Fill="Transparent" />
                        <ContentPresenter x:Name="ContentContainer"
                                          Margin="6"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center" />
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="B1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                            <Setter TargetName="L1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                            <Setter TargetName="R1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                            <Setter TargetName="T1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  MenuScrollViewer  -->
    <Style x:Key="Zephyr.Styles.MenuScrollViewer"
           BasedOn="{x:Null}"
           TargetType="{x:Type ScrollViewer}">
        <Setter Property="HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Border Grid.Row="1" Grid.Column="0">
                            <ScrollContentPresenter Margin="{TemplateBinding Padding}" />
                        </Border>
                        <RepeatButton Grid.Row="0"
                                      Grid.Column="0"
                                      Command="{x:Static ScrollBar.LineUpCommand}"
                                      CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                      Focusable="False"
                                      Style="{StaticResource Zephyr.Styles.RepeatButton.MenuScroll}">
                            <RepeatButton.Visibility>
                                <MultiBinding Converter="{StaticResource MenuScrollingVisibilityConverter}"
                                              ConverterParameter="0"
                                              FallbackValue="Visibility.Collapsed">
                                    <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Path Data="{StaticResource UpArrow}" Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
                        </RepeatButton>
                        <RepeatButton Grid.Row="2"
                                      Grid.Column="0"
                                      Command="{x:Static ScrollBar.LineDownCommand}"
                                      CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                      Focusable="False"
                                      Style="{StaticResource Zephyr.Styles.RepeatButton.MenuScroll}">
                            <RepeatButton.Visibility>
                                <MultiBinding Converter="{StaticResource MenuScrollingVisibilityConverter}"
                                              ConverterParameter="100"
                                              FallbackValue="Visibility.Collapsed">
                                    <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Path Data="{StaticResource DownArrow}" Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
                        </RepeatButton>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
    </Style>

    <!--  MenuItem Extra  -->
    <Style x:Key="{x:Static mah:Spelling.SuggestionMenuItemStyleKey}"
           BasedOn="{StaticResource MahApps.Styles.MenuItem}"
           TargetType="{x:Type MenuItem}">
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Header" Value="{Binding RelativeSource={RelativeSource Self}, Path=CommandParameter}" />
    </Style>

    <Style x:Key="{x:Static mah:Spelling.IgnoreAllMenuItemStyleKey}"
           BasedOn="{StaticResource MahApps.Styles.MenuItem}"
           TargetType="{x:Type MenuItem}">
        <Setter Property="Header" Value="Ignore All" />
    </Style>

    <Style x:Key="{x:Static mah:Spelling.NoSuggestionsMenuItemStyleKey}"
           BasedOn="{StaticResource MahApps.Styles.MenuItem}"
           TargetType="{x:Type MenuItem}">
        <Setter Property="Header" Value="(no spelling suggestions)" />
        <Setter Property="IsEnabled" Value="False" />
    </Style>

    <Style x:Key="{x:Static mah:Spelling.SeparatorStyleKey}"
           BasedOn="{StaticResource {x:Static MenuItem.SeparatorStyleKey}}"
           TargetType="{x:Type Separator}" />

    <!--  PartButton  -->
    <Style
        x:Key="Zephyr.Styles.PartButton"
        TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="{DynamicResource Zephyr.Brushes.PartButton.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource Zephyr.Brushes.PartButton.Foreground}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource MahApps.Styles.Button.FocusVisualStyle.Flat}" />
        <Setter Property="FontSize" Value="{DynamicResource MahApps.Font.Size.Button.Flat}" />
        
        <Setter Property="Padding" Value="10 5 10 5" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <mah:ClipBorder
                        x:Name="Border"
                        Margin="0"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding mah:ControlsHelper.CornerRadius}"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <mah:ContentControlEx
                            x:Name="PART_ContentPresenter"
                            Padding="{TemplateBinding Padding}"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ControlsHelper.ContentCharacterCasing)}"
                            ContentStringFormat="{TemplateBinding ContentStringFormat}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                            RecognizesAccessKey="{TemplateBinding mah:ControlsHelper.RecognizesAccessKey}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </mah:ClipBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Zephyr.Brushes.PartButton.Background.MouseOver}" />
                <Setter Property="Foreground" Value="{DynamicResource Zephyr.Brushes.PartButton.Foreground.MouseOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource Zephyr.Brushes.PartButton.Background.Pressed}" />
                <Setter Property="Foreground" Value="{DynamicResource Zephyr.Brushes.PartButton.Foreground.Pressed}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource Zephyr.Brushes.PartButton.Background.Disabled}" />
                <Setter Property="Foreground" Value="{DynamicResource Zephyr.Brushes.PartButton.Foreground.Disabled}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Expander  -->
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <mahConverters:ThicknessBindingConverter x:Key="ThicknessBindingConverter" />
    <mahConverters:CornerRadiusBindingConverter x:Key="CornerRadiusBindingConverter" />

    <Thickness x:Key="ExpanderHeaderThemePadding">3</Thickness>
    <system:Double x:Key="ExpanderToggleButtonEllipseThemeSize">18</system:Double>

    <Style x:Key="Zephyr.Styles.ToggleButton.ExpanderHeader.Base" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="{DynamicResource ExpanderHeaderThemePadding}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>

    <Style x:Key="Zephyr.Styles.ToggleButton.ExpanderHeader.Right"
           BasedOn="{StaticResource Zephyr.Styles.ToggleButton.ExpanderHeader.Base}"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <Grid Margin="{TemplateBinding Padding}"
                              Background="Transparent"
                              SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Grid
                                Margin="0 0 0 4">
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="-90" />
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="Circle"
                                         Width="{DynamicResource ExpanderToggleButtonEllipseThemeSize}"
                                         Height="{DynamicResource ExpanderToggleButtonEllipseThemeSize}"
                                         HorizontalAlignment="Center"
                                         VerticalAlignment="Center"
                                         Stroke="{TemplateBinding Foreground}" />
                                <Path x:Name="Arrow"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Data="M 1,1.5 L 4.5,5 L 8,1.5"
                                      SnapsToDevicePixels="false"
                                      Stroke="{TemplateBinding Foreground}"
                                      StrokeThickness="2" />
                            </Grid>
                            <mah:ContentControlEx Grid.Row="1"
                                                  Margin="0"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  Content="{TemplateBinding Content}"
                                                  ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ControlsHelper.ContentCharacterCasing)}"
                                                  ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                  ContentTemplate="{TemplateBinding ContentTemplate}"
                                                  ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                                  RecognizesAccessKey="{TemplateBinding mah:ControlsHelper.RecognizesAccessKey}"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="Arrow" Property="Data" Value="M 1,4.5  L 4.5,1  L 8,4.5" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Arrow" Property="Stroke" Value="{DynamicResource MahApps.Brushes.Gray2}" />
                            <Setter TargetName="Circle" Property="Stroke" Value="{DynamicResource MahApps.Brushes.Gray2}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Arrow" Property="Stroke" Value="{DynamicResource MahApps.Brushes.ThemeForeground}" />
                            <Setter TargetName="Circle" Property="Stroke" Value="{DynamicResource MahApps.Brushes.ThemeForeground}" />
                            <Setter TargetName="Circle" Property="StrokeThickness" Value="2" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
    </Style>

    <Style x:Key="Zephyr.Styles.ToggleButton.ExpanderHeader.Up"
           BasedOn="{StaticResource Zephyr.Styles.ToggleButton.ExpanderHeader.Base}"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid Margin="{TemplateBinding Padding}"
                              Background="Transparent"
                              SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid
                                Margin="0 0 4 0">
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="180" />
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="Circle"
                                         Width="{DynamicResource ExpanderToggleButtonEllipseThemeSize}"
                                         Height="{DynamicResource ExpanderToggleButtonEllipseThemeSize}"
                                         HorizontalAlignment="Center"
                                         VerticalAlignment="Center"
                                         Stroke="{TemplateBinding Foreground}" />
                                <Path x:Name="Arrow"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Data="M 1,1.5 L 4.5,5 L 8,1.5"
                                      SnapsToDevicePixels="false"
                                      Stroke="{TemplateBinding Foreground}"
                                      StrokeThickness="2" />
                            </Grid>
                            <mah:ContentControlEx Grid.Column="1"
                                                  Margin="0"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  Content="{TemplateBinding Content}"
                                                  ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ControlsHelper.ContentCharacterCasing)}"
                                                  ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                  ContentTemplate="{TemplateBinding ContentTemplate}"
                                                  ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                                  RecognizesAccessKey="{TemplateBinding mah:ControlsHelper.RecognizesAccessKey}"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="Arrow" Property="Data" Value="M 1,4.5  L 4.5,1  L 8,4.5" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Arrow" Property="Stroke" Value="{DynamicResource MahApps.Brushes.Gray2}" />
                            <Setter TargetName="Circle" Property="Stroke" Value="{DynamicResource MahApps.Brushes.Gray2}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Arrow" Property="Stroke" Value="{DynamicResource MahApps.Brushes.ThemeForeground}" />
                            <Setter TargetName="Circle" Property="Stroke" Value="{DynamicResource MahApps.Brushes.ThemeForeground}" />
                            <Setter TargetName="Circle" Property="StrokeThickness" Value="2" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>

    <Style x:Key="Zephyr.Styles.ToggleButton.ExpanderHeader.Left"
           BasedOn="{StaticResource Zephyr.Styles.ToggleButton.ExpanderHeader.Right}"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid Margin="{TemplateBinding Padding}"
                              Background="Transparent"
                              SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Grid
                                Margin="0 0 0 4">
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="90" />
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="Circle"
                                         Width="{DynamicResource ExpanderToggleButtonEllipseThemeSize}"
                                         Height="{DynamicResource ExpanderToggleButtonEllipseThemeSize}"
                                         HorizontalAlignment="Center"
                                         VerticalAlignment="Center"
                                         Stroke="{TemplateBinding Foreground}" />
                                <Path x:Name="Arrow"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Data="M 1,1.5 L 4.5,5 L 8,1.5"
                                      SnapsToDevicePixels="false"
                                      Stroke="{TemplateBinding Foreground}"
                                      StrokeThickness="2" />
                            </Grid>
                            <mah:ContentControlEx Grid.Row="1"
                                                  Margin="0"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  Content="{TemplateBinding Content}"
                                                  ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ControlsHelper.ContentCharacterCasing)}"
                                                  ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                  ContentTemplate="{TemplateBinding ContentTemplate}"
                                                  ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                                  RecognizesAccessKey="{TemplateBinding mah:ControlsHelper.RecognizesAccessKey}"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="Arrow" Property="Data" Value="M 1,4.5  L 4.5,1  L 8,4.5" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Arrow" Property="Stroke" Value="{DynamicResource MahApps.Brushes.Gray2}" />
                            <Setter TargetName="Circle" Property="Stroke" Value="{DynamicResource MahApps.Brushes.Gray2}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Arrow" Property="Stroke" Value="{DynamicResource MahApps.Brushes.ThemeForeground}" />
                            <Setter TargetName="Circle" Property="Stroke" Value="{DynamicResource MahApps.Brushes.ThemeForeground}" />
                            <Setter TargetName="Circle" Property="StrokeThickness" Value="2" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Zephyr.Styles.ToggleButton.ExpanderHeader.Down"
           BasedOn="{StaticResource Zephyr.Styles.ToggleButton.ExpanderHeader.Up}"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid Margin="{TemplateBinding Padding}"
                              Background="Transparent"
                              SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid
                                Margin="0 0 4 0">
                                <Ellipse x:Name="Circle"
                                         Width="{DynamicResource ExpanderToggleButtonEllipseThemeSize}"
                                         Height="{DynamicResource ExpanderToggleButtonEllipseThemeSize}"
                                         HorizontalAlignment="Center"
                                         VerticalAlignment="Center"
                                         Stroke="{TemplateBinding Foreground}" />
                                <Path x:Name="Arrow"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Data="M 1,1.5 L 4.5,5 L 8,1.5"
                                      SnapsToDevicePixels="false"
                                      Stroke="{TemplateBinding Foreground}"
                                      StrokeThickness="2" />
                            </Grid>
                            <mah:ContentControlEx Grid.Column="1"
                                                  Margin="0"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  Content="{TemplateBinding Content}"
                                                  ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ControlsHelper.ContentCharacterCasing)}"
                                                  ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                  ContentTemplate="{TemplateBinding ContentTemplate}"
                                                  ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                                  RecognizesAccessKey="{TemplateBinding mah:ControlsHelper.RecognizesAccessKey}"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="Arrow" Property="Data" Value="M 1,4.5  L 4.5,1  L 8,4.5" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Arrow" Property="Stroke" Value="{DynamicResource MahApps.Brushes.Gray2}" />
                            <Setter TargetName="Circle" Property="Stroke" Value="{DynamicResource MahApps.Brushes.Gray2}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Arrow" Property="Stroke" Value="{DynamicResource MahApps.Brushes.ThemeForeground}" />
                            <Setter TargetName="Circle" Property="Stroke" Value="{DynamicResource MahApps.Brushes.ThemeForeground}" />
                            <Setter TargetName="Circle" Property="StrokeThickness" Value="2" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Storyboard x:Key="Zephyr.Storyboard.Expander.Expand">
        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ExpandSite" Storyboard.TargetProperty="(UIElement.Visibility)">
            <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}" />
        </ObjectAnimationUsingKeyFrames>
        <DoubleAnimation Storyboard.TargetName="ExpandSite"
                         Storyboard.TargetProperty="(UIElement.Opacity)"
                         From="0"
                         To="1"
                         Duration="0:0:0.25" />
    </Storyboard>

    <Storyboard x:Key="Zephyr.Storyboard.Expander.Collapse">
        <DoubleAnimation Storyboard.TargetName="ExpandSite"
                         Storyboard.TargetProperty="(UIElement.Opacity)"
                         From="1"
                         To="0"
                         Duration="0:0:0.25" />
        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ExpandSite" Storyboard.TargetProperty="(UIElement.Visibility)">
            <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}" />
            <DiscreteObjectKeyFrame KeyTime="0:0:0.25" Value="{x:Static Visibility.Collapsed}" />
        </ObjectAnimationUsingKeyFrames>
    </Storyboard>

    <Style x:Key="Zephyr.Styles.Expander" TargetType="{x:Type Expander}">
        <Setter Property="BorderBrush" Value="{DynamicResource MahApps.Brushes.Accent}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource MahApps.Brushes.ThemeForeground}" />
        <Setter Property="Padding" Value="4" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Grid>
                        <Rectangle
                            x:Name="DisabledVisualElement"
                            Fill="{DynamicResource MahApps.Brushes.Control.Disabled}"
                            IsHitTestVisible="false"
                            Opacity="0" />
                        <DockPanel
                            x:Name="ExpanderRoot">
                            <Border
                                x:Name="HeaderSite"
                                Background="{TemplateBinding mah:HeaderedControlHelper.HeaderBackground}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ControlsHelper.CornerRadius), Converter={StaticResource CornerRadiusBindingConverter}, ConverterParameter={x:Static mahConverters:RadiusType.Bottom}}"
                                DockPanel.Dock="Top"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                UseLayoutRounding="True">
                                <ToggleButton
                                    x:Name="ToggleSite"
                                    Padding="{TemplateBinding mah:HeaderedControlHelper.HeaderMargin}"
                                    HorizontalContentAlignment="{TemplateBinding mah:HeaderedControlHelper.HeaderHorizontalContentAlignment}"
                                    VerticalContentAlignment="{TemplateBinding mah:HeaderedControlHelper.HeaderVerticalContentAlignment}"
                                    mah:ControlsHelper.ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ControlsHelper.ContentCharacterCasing)}"
                                    Content="{TemplateBinding Header}"
                                    ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                    ContentTemplate="{TemplateBinding HeaderTemplate}"
                                    ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                    FontFamily="{TemplateBinding mah:HeaderedControlHelper.HeaderFontFamily}"
                                    FontSize="{TemplateBinding mah:HeaderedControlHelper.HeaderFontSize}"
                                    FontStretch="{TemplateBinding mah:HeaderedControlHelper.HeaderFontStretch}"
                                    FontWeight="{TemplateBinding mah:HeaderedControlHelper.HeaderFontWeight}"
                                    IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                    Style="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ExpanderHelper.HeaderDownStyle)}"
                                    UseLayoutRounding="False">
                                    <ToggleButton.Foreground>
                                        <MultiBinding
                                            Converter="{x:Static mahConverters:BackgroundToForegroundConverter.Instance}">
                                            <Binding
                                                Mode="OneWay"
                                                Path="(mah:HeaderedControlHelper.HeaderBackground)"
                                                RelativeSource="{RelativeSource TemplatedParent}" />
                                            <Binding
                                                Mode="OneWay"
                                                Path="(mah:HeaderedControlHelper.HeaderForeground)"
                                                RelativeSource="{RelativeSource TemplatedParent}" />
                                        </MultiBinding>
                                    </ToggleButton.Foreground>
                                </ToggleButton>
                            </Border>
                            <Border
                                x:Name="ExpandSite"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness, Converter={StaticResource ThicknessBindingConverter}, ConverterParameter={x:Static mahConverters:ThicknessSideType.Top}}"
                                CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ControlsHelper.CornerRadius), Converter={StaticResource CornerRadiusBindingConverter}, ConverterParameter={x:Static mahConverters:RadiusType.Top}}"
                                DockPanel.Dock="Bottom"
                                Focusable="false"
                                Opacity="0"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                UseLayoutRounding="True"
                                Visibility="Collapsed">
                                <ContentPresenter
                                    Margin="{TemplateBinding Padding}"
                                    Content="{TemplateBinding Content}"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                    Cursor="{TemplateBinding Cursor}"
                                    UseLayoutRounding="False" />
                            </Border>
                        </DockPanel>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup
                                x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DisabledVisualElement" Storyboard.TargetProperty="Opacity">
                                            <SplineDoubleKeyFrame KeyTime="0" Value="0.7" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpanderRoot" Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.3" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsExpanded, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding Path=(mah:ExpanderHelper.ExpandStoryboard), RelativeSource={RelativeSource Self}}" Value="{x:Null}" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ExpandSite" Property="Opacity" Value="1" />
                            <Setter TargetName="ExpandSite" Property="Visibility" Value="Visible" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsExpanded, RelativeSource={RelativeSource Self}}" Value="False" />
                                <Condition Binding="{Binding Path=(mah:ExpanderHelper.CollapseStoryboard), RelativeSource={RelativeSource Self}}" Value="{x:Null}" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ExpandSite" Property="Opacity" Value="0" />
                            <Setter TargetName="ExpandSite" Property="Visibility" Value="Collapsed" />
                        </MultiDataTrigger>

                        <Trigger Property="ExpandDirection" Value="Right">
                            <Setter TargetName="ExpandSite" Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness, Converter={StaticResource ThicknessBindingConverter}, ConverterParameter={x:Static mahConverters:ThicknessSideType.Left}}" />
                            <Setter TargetName="ExpandSite" Property="CornerRadius" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ControlsHelper.CornerRadius), Converter={StaticResource CornerRadiusBindingConverter}, ConverterParameter={x:Static mahConverters:RadiusType.Left}}" />
                            <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Right" />
                            <Setter TargetName="HeaderSite" Property="CornerRadius" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ControlsHelper.CornerRadius), Converter={StaticResource CornerRadiusBindingConverter}, ConverterParameter={x:Static mahConverters:RadiusType.Right}}" />
                            <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Left" />
                            <Setter TargetName="ToggleSite" Property="Style" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ExpanderHelper.HeaderRightStyle)}" />
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter TargetName="ExpandSite" Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness, Converter={StaticResource ThicknessBindingConverter}, ConverterParameter={x:Static mahConverters:ThicknessSideType.Bottom}}" />
                            <Setter TargetName="ExpandSite" Property="CornerRadius" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ControlsHelper.CornerRadius), Converter={StaticResource CornerRadiusBindingConverter}, ConverterParameter={x:Static mahConverters:RadiusType.Bottom}}" />
                            <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Top" />
                            <Setter TargetName="HeaderSite" Property="CornerRadius" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ControlsHelper.CornerRadius), Converter={StaticResource CornerRadiusBindingConverter}, ConverterParameter={x:Static mahConverters:RadiusType.Top}}" />
                            <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Bottom" />
                            <Setter TargetName="ToggleSite" Property="Style" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ExpanderHelper.HeaderUpStyle)}" />
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Left">
                            <Setter TargetName="ExpandSite" Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness, Converter={StaticResource ThicknessBindingConverter}, ConverterParameter={x:Static mahConverters:ThicknessSideType.Right}}" />
                            <Setter TargetName="ExpandSite" Property="CornerRadius" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ControlsHelper.CornerRadius), Converter={StaticResource CornerRadiusBindingConverter}, ConverterParameter={x:Static mahConverters:RadiusType.Right}}" />
                            <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Left" />
                            <Setter TargetName="HeaderSite" Property="CornerRadius" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ControlsHelper.CornerRadius), Converter={StaticResource CornerRadiusBindingConverter}, ConverterParameter={x:Static mahConverters:RadiusType.Left}}" />
                            <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Right" />
                            <Setter TargetName="ToggleSite" Property="Style" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ExpanderHelper.HeaderLeftStyle)}" />
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter TargetName="HeaderSite" Property="CornerRadius" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ControlsHelper.CornerRadius)}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="mah:ControlsHelper.ContentCharacterCasing" Value="{DynamicResource MahApps.CharacterCasing.Expander}" />
        <Setter Property="mah:ExpanderHelper.CollapseStoryboard" Value="{StaticResource Zephyr.Storyboard.Expander.Collapse}" />
        <Setter Property="mah:ExpanderHelper.ExpandStoryboard" Value="{StaticResource Zephyr.Storyboard.Expander.Expand}" />
        <Setter Property="mah:ExpanderHelper.HeaderDownStyle" Value="{StaticResource Zephyr.Styles.ToggleButton.ExpanderHeader.Down}" />
        <Setter Property="mah:ExpanderHelper.HeaderLeftStyle" Value="{StaticResource Zephyr.Styles.ToggleButton.ExpanderHeader.Left}" />
        <Setter Property="mah:ExpanderHelper.HeaderRightStyle" Value="{StaticResource Zephyr.Styles.ToggleButton.ExpanderHeader.Right}" />
        <Setter Property="mah:ExpanderHelper.HeaderUpStyle" Value="{StaticResource Zephyr.Styles.ToggleButton.ExpanderHeader.Up}" />
        <Setter Property="mah:HeaderedControlHelper.HeaderBackground" Value="{DynamicResource Zephyr.Gradients.Expander.Background}" />
        <Setter Property="mah:HeaderedControlHelper.HeaderFontSize" Value="{DynamicResource MahApps.Font.Size.Content}" />
        <Setter Property="mah:HeaderedControlHelper.HeaderForeground" Value="{x:Null}" />
        <Setter Property="mah:HeaderedControlHelper.HeaderMargin" Value="{DynamicResource ExpanderHeaderThemePadding}" />
    </Style>

</ResourceDictionary>